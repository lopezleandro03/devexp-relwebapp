{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.16.2.56959",
      "templateHash": "4078742925001500720"
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Name of the the environment which is used to generate a short unqiue hash used in all resources."
      },
      "maxLength": 64
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Primary location for all resources. Should specify an Azure region. e.g. `eastus2` "
      }
    },
    "principalId": {
      "type": "string",
      "metadata": {
        "description": "Id of the user or app to assign application roles"
      }
    },
    "isProd": {
      "type": "string",
      "defaultValue": "false",
      "metadata": {
        "description": "Will select production ready SKUs when `true`"
      }
    },
    "secondaryAzureLocation": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Should specify an Azure region, if not set to none, to trigger multiregional deployment. The second region should be different than the `location` . e.g. `westus3`"
      }
    },
    "azureSqlPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Specifies a password that will be used to secure the Azure SQL Database"
      }
    },
    "principalType": {
      "type": "string",
      "defaultValue": "User",
      "metadata": {
        "description": "When the deployment is executed by a user we give the principal RBAC access to key vault"
      }
    },
    "azureAdApiScopeFrontEnd": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "A scope used by the front-end public web app to get authorized access to the public web api. Looks similar to api://33333333-bbbb-4444-cccc-555555555555/relecloud.api"
      }
    },
    "azureAdClientIdForBackEnd": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "A unique identifier of the API web app"
      }
    },
    "azureAdClientIdForFrontEnd": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "A unique identifier of the front-end web app"
      }
    },
    "azureAdClientSecretForFrontEnd": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "A secret generated by Azure AD so that the web app can establish trust with Azure AD"
      }
    },
    "azureAdTenantId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "A unique identifier of the Azure AD tenant"
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable usage and telemetry feedback to Microsoft."
      }
    }
  },
  "variables": {
    "isProdBool": "[if(equals(parameters('isProd'), 'true'), true(), false())]",
    "tags": {
      "azd-env-name": "[parameters('name')]"
    },
    "isMultiLocationDeployment": "[if(equals(parameters('secondaryAzureLocation'), ''), false(), true())]",
    "primaryResourceGroupName": "[resourceGroup().name]",
    "secondaryResourceGroupName": "[format('{0}-secondary', resourceGroup().name)]",
    "primaryResourceToken": "[toLower(uniqueString(subscription().id, variables('primaryResourceGroupName'), parameters('location')))]",
    "secondaryResourceToken": "[toLower(uniqueString(subscription().id, variables('secondaryResourceGroupName'), parameters('secondaryAzureLocation')))]",
    "telemetryId": "[format('063f9e42-c824-4573-8a47-5f6112612fe2-{0}', parameters('location'))]"
  },
  "resources": [
    {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[variables('telemetryId')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
          "contentVersion": "1.0.0.0",
          "resources": {}
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "logAnalyticsForDiagnostics",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "tags": {
            "value": "[variables('tags')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceNameForDiagnstics": {
            "value": "[format('diagnostics-{0}-log', variables('primaryResourceToken'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.2.56959",
              "templateHash": "11979965893294720980"
            }
          },
          "parameters": {
            "logAnalyticsWorkspaceNameForDiagnstics": {
              "type": "string",
              "metadata": {
                "description": "Name for a log analytics workspace that will collect diagnostic info for Key Vault and Front Door"
              },
              "minLength": 1
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Primary location for all resources. Should specify an Azure region. e.g. `eastus2` "
              },
              "minLength": 1
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "An object collection that contains annotations to describe the deployed azure resources to improve operational visibility"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-06-01",
              "name": "[parameters('logAnalyticsWorkspaceNameForDiagnstics')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "retentionInDays": 30,
                "sku": {
                  "name": "PerGB2018"
                }
              }
            }
          ],
          "outputs": {
            "LOG_WORKSPACE_ID": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceNameForDiagnstics'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "devOpsIdentitySetup",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "tags": {
            "value": "[variables('tags')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "resourceToken": {
            "value": "[variables('primaryResourceToken')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.2.56959",
              "templateHash": "14447767282969728197"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Primary location for all resources. Should specify an Azure region. e.g. `eastus2` "
              },
              "minLength": 1
            },
            "resourceToken": {
              "type": "string",
              "metadata": {
                "description": "A generated identifier used to create unique resources"
              },
              "minLength": 1
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "An object collection that contains annotations to describe the deployed azure resources to improve operational visibility"
              }
            }
          },
          "variables": {
            "contributorRole": "b24988ac-6180-42a0-ab88-20f7382dd24c"
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[format('devops-{0}-identity', parameters('resourceToken'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "metadata": {
                "description": "A user-assigned managed identity that is used to run deploymentScripts on this resource group."
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(variables('contributorRole'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('devops-{0}-identity', parameters('resourceToken'))))]",
              "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRole'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('devops-{0}-identity', parameters('resourceToken'))), '2018-11-30').principalId]",
                "description": "Grant the \"Contributor\" role to the user-assigned managed identity so it can run deployment scripts."
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('devops-{0}-identity', parameters('resourceToken')))]"
              ]
            }
          ],
          "outputs": {
            "devOpsManagedIdentityId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('devops-{0}-identity', parameters('resourceToken')))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('primary-{0}', variables('primaryResourceToken'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "azureSqlPassword": {
            "value": "[parameters('azureSqlPassword')]"
          },
          "devOpsManagedIdentityId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'devOpsIdentitySetup'), '2022-09-01').outputs.devOpsManagedIdentityId.value]"
          },
          "isProd": {
            "value": "[variables('isProdBool')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "principalType": {
            "value": "[parameters('principalType')]"
          },
          "resourceToken": {
            "value": "[variables('primaryResourceToken')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "azureAdApiScopeFrontEnd": {
            "value": "[parameters('azureAdApiScopeFrontEnd')]"
          },
          "azureAdClientIdForBackEnd": {
            "value": "[parameters('azureAdClientIdForBackEnd')]"
          },
          "azureAdClientIdForFrontEnd": {
            "value": "[parameters('azureAdClientIdForFrontEnd')]"
          },
          "azureAdClientSecretForFrontEnd": {
            "value": "[parameters('azureAdClientSecretForFrontEnd')]"
          },
          "azureAdTenantId": {
            "value": "[parameters('azureAdTenantId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.2.56959",
              "templateHash": "8182305731182661708"
            }
          },
          "parameters": {
            "isProd": {
              "type": "bool",
              "metadata": {
                "description": "Enables the template to choose different SKU by environment"
              }
            },
            "devOpsManagedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "The id for the user-assigned managed identity that runs deploymentScripts"
              }
            },
            "azureSqlPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Specifies a password that will be used to secure the Azure SQL Database"
              },
              "minLength": 1
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Primary location for all resources. Should specify an Azure region. e.g. `eastus2` "
              },
              "minLength": 1
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "The user running the deployment will be given access to the deployed resources such as Key Vault and App Config svc"
              },
              "minLength": 1
            },
            "resourceToken": {
              "type": "string",
              "metadata": {
                "description": "A generated identifier used to create unique resources"
              }
            },
            "principalType": {
              "type": "string",
              "metadata": {
                "description": "When the deployment is executed by a user we give the principal RBAC access to key vault"
              },
              "minLength": 1
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "An object collection that contains annotations to describe the deployed azure resources to improve operational visibility"
              }
            },
            "azureAdApiScopeFrontEnd": {
              "type": "string",
              "metadata": {
                "description": "A scope used by the front-end public web app to get authorized access to the public web api. Looks similar to api://33333333-bbbb-4444-cccc-555555555555/relecloud.api"
              }
            },
            "azureAdClientIdForBackEnd": {
              "type": "string",
              "metadata": {
                "description": "A unique identifier of the API web app"
              }
            },
            "azureAdClientIdForFrontEnd": {
              "type": "string",
              "metadata": {
                "description": "A unique identifier of the front-end web app"
              }
            },
            "azureAdClientSecretForFrontEnd": {
              "type": "securestring",
              "metadata": {
                "description": "A secret generated by Azure AD so that the web app can establish trust with Azure AD"
              }
            },
            "azureAdTenantId": {
              "type": "string",
              "metadata": {
                "description": "A unique identifier of the Azure AD tenant"
              }
            }
          },
          "variables": {
            "appConfigurationRoleDefinitionId": "516239f1-63e1-4d78-a4de-a74fb236a071",
            "keyVaultSecretsUserRoleDefinitionId": "4633458b-17de-408a-b874-0445c86b69e6",
            "keyVaultAdminRoleDefinitionId": "00482a5a-887f-4fb3-b363-3b7fe8e74483",
            "keyVaultPublicNetworkAccess": "[if(parameters('isProd'), 'disabled', 'enabled')]",
            "aspNetCoreEnvironment": "[if(parameters('isProd'), 'Production', 'Development')]",
            "appServicePlanSku": "[if(parameters('isProd'), 'P1v2', 'B1')]",
            "privateEndpointNameForRedis": "privateEndpointForRedis",
            "storageBlobDataOwnerRoleDefinitionId": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
            "privateEndpointSubnetName": "subnetPrivateEndpoints",
            "subnetApiAppService": "subnetApiAppService",
            "subnetWebAppService": "subnetWebAppService"
          },
          "resources": [
            {
              "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}', format('{0}-appconfig', parameters('resourceToken')), 'App:RelecloudApi:BaseUri')]",
              "properties": {
                "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', format('api-{0}-web-app', parameters('resourceToken'))), '2021-01-15').defaultHostName)]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', format('api-{0}-web-app', parameters('resourceToken')))]",
                "[resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}', format('{0}-appconfig', parameters('resourceToken')), 'App:SqlDatabase:ConnectionString')]",
              "properties": {
                "value": "[format('Server=tcp:{0},1433;Initial Catalog={1};Authentication=Active Directory Default', reference(resourceId('Microsoft.Resources/deployments', 'sqlSetup'), '2022-09-01').outputs.sqlServerFqdn.value, reference(resourceId('Microsoft.Resources/deployments', 'sqlSetup'), '2022-09-01').outputs.sqlCatalogName.value)]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken')))]",
                "[resourceId('Microsoft.Resources/deployments', 'sqlSetup')]"
              ]
            },
            {
              "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}', format('{0}-appconfig', parameters('resourceToken')), 'App:RedisCache:ConnectionString')]",
              "properties": {
                "value": "[string(createObject('uri', format('{0}secrets/{1}', reference(resourceId('Microsoft.KeyVault/vaults', format('rc-{0}-kv', parameters('resourceToken'))), '2021-11-01-preview').vaultUri, reference(resourceId('Microsoft.Resources/deployments', 'redisSetup'), '2022-09-01').outputs.keyVaultRedisConnStrName.value)))]",
                "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken')))]",
                "[resourceId('Microsoft.KeyVault/vaults', format('rc-{0}-kv', parameters('resourceToken')))]",
                "[resourceId('Microsoft.Resources/deployments', 'redisSetup')]"
              ]
            },
            {
              "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}', format('{0}-appconfig', parameters('resourceToken')), 'App:StorageAccount:Url')]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storageSetup'), '2022-09-01').outputs.storageAccocuntBlobURL.value]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken')))]",
                "[resourceId('Microsoft.Resources/deployments', 'storageSetup')]"
              ]
            },
            {
              "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}', format('{0}-appconfig', parameters('resourceToken')), 'App:StorageAccount:Container')]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storageSetup'), '2022-09-01').outputs.containerName.value]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken')))]",
                "[resourceId('Microsoft.Resources/deployments', 'storageSetup')]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', format('web-{0}-web-app', parameters('resourceToken')), 'appsettings')]",
              "properties": {
                "ASPNETCORE_ENVIRONMENT": "[variables('aspNetCoreEnvironment')]",
                "AZURE_CLIENT_ID": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken'))), '2018-11-30').clientId]",
                "APPLICATIONINSIGHTS_CONNECTION_STRING": "[reference(resourceId('Microsoft.Resources/deployments', format('web-{0}-app-insights', parameters('resourceToken'))), '2022-09-01').outputs.APPLICATIONINSIGHTS_CONNECTION_STRING.value]",
                "App:AppConfig:Uri": "[reference(resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken'))), '2022-05-01').endpoint]",
                "SCM_DO_BUILD_DURING_DEPLOYMENT": "false",
                "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Resources/deployments', format('web-{0}-app-insights', parameters('resourceToken'))), '2022-09-01').outputs.APPLICATIONINSIGHTS_INSTRUMENTATION_KEY.value]",
                "ApplicationInsightsAgent_EXTENSION_VERSION": "~2",
                "XDT_MicrosoftApplicationInsights_Mode": "recommended",
                "InstrumentationEngine_EXTENSION_VERSION": "~1",
                "XDT_MicrosoftApplicationInsights_BaseExtensions": "~1"
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken')))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken')))]",
                "[resourceId('Microsoft.Web/sites', format('web-{0}-web-app', parameters('resourceToken')))]",
                "[resourceId('Microsoft.Resources/deployments', format('web-{0}-app-insights', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', format('web-{0}-web-app', parameters('resourceToken')), 'logs')]",
              "properties": {
                "applicationLogs": {
                  "fileSystem": {
                    "level": "Verbose"
                  }
                },
                "detailedErrorMessages": {
                  "enabled": true
                },
                "failedRequestsTracing": {
                  "enabled": true
                },
                "httpLogs": {
                  "fileSystem": {
                    "enabled": true,
                    "retentionInDays": 1,
                    "retentionInMb": 35
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites/config', format('web-{0}-web-app', parameters('resourceToken')), 'appsettings')]",
                "[resourceId('Microsoft.Web/sites', format('web-{0}-web-app', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2021-01-15",
              "name": "[format('{0}/{1}', format('api-{0}-web-app', parameters('resourceToken')), 'appsettings')]",
              "properties": {
                "ASPNETCORE_ENVIRONMENT": "[variables('aspNetCoreEnvironment')]",
                "AZURE_CLIENT_ID": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken'))), '2018-11-30').clientId]",
                "APPLICATIONINSIGHTS_CONNECTION_STRING": "[reference(resourceId('Microsoft.Resources/deployments', format('web-{0}-app-insights', parameters('resourceToken'))), '2022-09-01').outputs.APPLICATIONINSIGHTS_CONNECTION_STRING.value]",
                "Api:AppConfig:Uri": "[reference(resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken'))), '2022-05-01').endpoint]",
                "SCM_DO_BUILD_DURING_DEPLOYMENT": "false",
                "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Resources/deployments', format('web-{0}-app-insights', parameters('resourceToken'))), '2022-09-01').outputs.APPLICATIONINSIGHTS_INSTRUMENTATION_KEY.value]",
                "ApplicationInsightsAgent_EXTENSION_VERSION": "~2",
                "XDT_MicrosoftApplicationInsights_Mode": "recommended",
                "InstrumentationEngine_EXTENSION_VERSION": "~1",
                "XDT_MicrosoftApplicationInsights_BaseExtensions": "~1"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', format('api-{0}-web-app', parameters('resourceToken')))]",
                "[resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken')))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken')))]",
                "[resourceId('Microsoft.Resources/deployments', format('web-{0}-app-insights', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2021-01-15",
              "name": "[format('{0}/{1}', format('api-{0}-web-app', parameters('resourceToken')), 'logs')]",
              "properties": {
                "applicationLogs": {
                  "fileSystem": {
                    "level": "Verbose"
                  }
                },
                "detailedErrorMessages": {
                  "enabled": true
                },
                "failedRequestsTracing": {
                  "enabled": true
                },
                "httpLogs": {
                  "fileSystem": {
                    "enabled": true,
                    "retentionInDays": 1,
                    "retentionInMb": 35
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', format('api-{0}-web-app', parameters('resourceToken')))]",
                "[resourceId('Microsoft.Web/sites/config', format('api-{0}-web-app', parameters('resourceToken')), 'appsettings')]"
              ]
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[format('web-{0}-identity', parameters('resourceToken'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "metadata": {
                "description": "A user-assigned managed identity that is used by the App Service app"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(variables('appConfigurationRoleDefinitionId'), resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken'))), format('web-{0}-identity', parameters('resourceToken')), parameters('resourceToken'))]",
              "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('appConfigurationRoleDefinitionId'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken'))), '2018-11-30').principalId]",
                "description": "Grant the \"Data Reader\" role to the user-assigned managed identity so it can access the azure app configuration service."
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken')))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken')))]"
              ],
              "metadata": {
                "description": "Grant the 'Data Reader' role to the user-assigned managed identity, at the scope of the resource group."
              }
            },
            {
              "condition": "[equals(parameters('principalType'), 'user')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(variables('appConfigurationRoleDefinitionId'), resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken'))), parameters('principalId'), parameters('resourceToken'))]",
              "properties": {
                "principalType": "User",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('appConfigurationRoleDefinitionId'))]",
                "principalId": "[parameters('principalId')]",
                "description": "Grant the \"Data Reader\" role to the principal identity so it can access the azure app configuration service."
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken')))]"
              ],
              "metadata": {
                "description": "Grant the 'Data Reader' role to the principal, at the scope of the resource group."
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(variables('keyVaultSecretsUserRoleDefinitionId'), resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken'))), parameters('principalId'), parameters('resourceToken'))]",
              "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('keyVaultSecretsUserRoleDefinitionId'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken'))), '2018-11-30').principalId]",
                "description": "Grant the \"Key Secrets User\" role to the principal identity so it can manage the key vault service."
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken')))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken')))]"
              ],
              "metadata": {
                "description": "Grant the 'Data Reader' role to the principal, at the scope of the resource group."
              }
            },
            {
              "condition": "[equals(parameters('principalType'), 'user')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(variables('keyVaultAdminRoleDefinitionId'), resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken'))), parameters('principalId'), parameters('resourceToken'))]",
              "properties": {
                "principalType": "User",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('keyVaultAdminRoleDefinitionId'))]",
                "principalId": "[parameters('principalId')]",
                "description": "Grant the \"Key Vault Administrator\" role to the principal identity so it can manage the key vault service."
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken')))]"
              ],
              "metadata": {
                "description": "Grant the 'Data Reader' role to the principal, at the scope of the resource group."
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('rc-{0}-kv', parameters('resourceToken'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publicNetworkAccess": "[variables('keyVaultPublicNetworkAccess')]",
                "networkAcls": {
                  "defaultAction": "Allow",
                  "bypass": "AzureServices"
                },
                "enableRbacAuthorization": true,
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "tenantId": "[subscription().tenantId]"
              }
            },
            {
              "type": "Microsoft.AppConfiguration/configurationStores",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}-appconfig', parameters('resourceToken'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "publicNetworkAccess": "Enabled"
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2021-03-01",
              "name": "[format('web-{0}-web-app', parameters('resourceToken'))]",
              "location": "[parameters('location')]",
              "tags": "[union(parameters('tags'), createObject('azd-service-name', 'web'))]",
              "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('{0}-web-plan', parameters('resourceToken')))]",
                "siteConfig": {
                  "alwaysOn": true,
                  "ftpsState": "Disabled",
                  "vnetRouteAllEnabled": false
                },
                "httpsOnly": true,
                "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', format('rc-{0}-vnet', parameters('resourceToken')), variables('subnetWebAppService'))]"
              },
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken'))))]": {}
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken')))]",
                "[resourceId('Microsoft.Network/virtualNetworks', format('rc-{0}-vnet', parameters('resourceToken')))]",
                "[resourceId('Microsoft.Web/serverfarms', format('{0}-web-plan', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2021-01-15",
              "name": "[format('api-{0}-web-app', parameters('resourceToken'))]",
              "location": "[parameters('location')]",
              "tags": "[union(parameters('tags'), createObject('azd-service-name', 'api'))]",
              "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('{0}-api-plan', parameters('resourceToken')))]",
                "siteConfig": {
                  "alwaysOn": true,
                  "ftpsState": "Disabled",
                  "vnetRouteAllEnabled": false
                },
                "httpsOnly": true,
                "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', format('rc-{0}-vnet', parameters('resourceToken')), variables('subnetApiAppService'))]"
              },
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken'))))]": {}
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', format('{0}-api-plan', parameters('resourceToken')))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken')))]",
                "[resourceId('Microsoft.Network/virtualNetworks', format('rc-{0}-vnet', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}-web-plan', parameters('resourceToken'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[variables('appServicePlanSku')]"
              },
              "properties": {},
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'redisSetup')]"
              ]
            },
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}-api-plan', parameters('resourceToken'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[variables('appServicePlanSku')]"
              },
              "properties": {},
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'redisSetup')]"
              ]
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2020-03-01-preview",
              "name": "[format('web-{0}-log', parameters('resourceToken'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "retentionInDays": 30,
                "sku": {
                  "name": "PerGB2018"
                }
              }
            },
            {
              "condition": "[equals(parameters('principalType'), 'user')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(variables('storageBlobDataOwnerRoleDefinitionId'), 'storageSetup', parameters('principalId'), parameters('resourceToken'))]",
              "properties": {
                "principalType": "User",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataOwnerRoleDefinitionId'))]",
                "principalId": "[parameters('principalId')]",
                "description": "Grant the \"Storage Blob Data Owner\" role to the developer so they can write to Azure storage while doing local development."
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'storageSetup')]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2020-07-01",
              "name": "[format('rc-{0}-vnet', parameters('resourceToken'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "10.0.0.0/16"
                  ]
                },
                "subnets": [
                  {
                    "name": "[variables('privateEndpointSubnetName')]",
                    "properties": {
                      "addressPrefix": "10.0.0.0/24",
                      "privateEndpointNetworkPolicies": "Disabled"
                    }
                  },
                  {
                    "name": "[variables('subnetWebAppService')]",
                    "properties": {
                      "addressPrefix": "10.0.1.0/24",
                      "delegations": [
                        {
                          "name": "delegation",
                          "properties": {
                            "serviceName": "Microsoft.Web/serverfarms"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "[variables('subnetApiAppService')]",
                    "properties": {
                      "addressPrefix": "10.0.2.0/24",
                      "delegations": [
                        {
                          "name": "delegation",
                          "properties": {
                            "serviceName": "Microsoft.Web/serverfarms"
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2020-07-01",
              "name": "privateEndpointForSql",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', format('rc-{0}-vnet', parameters('resourceToken')), variables('privateEndpointSubnetName'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}/{1}', reference(resourceId('Microsoft.Resources/deployments', 'sqlSetup'), '2022-09-01').outputs.sqlServerName.value, reference(resourceId('Microsoft.Resources/deployments', 'sqlSetup'), '2022-09-01').outputs.sqlDatabaseName.value)]",
                    "properties": {
                      "privateLinkServiceId": "[reference(resourceId('Microsoft.Resources/deployments', 'sqlSetup'), '2022-09-01').outputs.sqlServerId.value]",
                      "groupIds": [
                        "sqlServer"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'sqlSetup')]",
                "[resourceId('Microsoft.Network/virtualNetworks', format('rc-{0}-vnet', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[format('privatelink{0}', environment().suffixes.sqlServerHostname)]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', format('privatelink{0}', environment().suffixes.sqlServerHostname), format('{0}-link', format('privatelink{0}', environment().suffixes.sqlServerHostname)))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', format('rc-{0}-vnet', parameters('resourceToken')))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink{0}', environment().suffixes.sqlServerHostname))]",
                "[resourceId('Microsoft.Network/virtualNetworks', format('rc-{0}-vnet', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-07-01",
              "name": "[format('{0}/mydnsgroupname', 'privateEndpointForSql')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink{0}', environment().suffixes.sqlServerHostname))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink{0}', environment().suffixes.sqlServerHostname))]",
                "[resourceId('Microsoft.Network/privateEndpoints', 'privateEndpointForSql')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-07-01",
              "name": "[format('{0}/mydnsgroupname', variables('privateEndpointNameForRedis'))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[reference(resourceId('Microsoft.Resources/deployments', 'redisSetup'), '2022-09-01').outputs.privateDnsZoneId.value]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'redisSetup')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "privatelink.vaultcore.azure.net",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', 'privatelink.vaultcore.azure.net', format('{0}-link', 'privatelink.vaultcore.azure.net'))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', format('rc-{0}-vnet', parameters('resourceToken')))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.vaultcore.azure.net')]",
                "[resourceId('Microsoft.Network/virtualNetworks', format('rc-{0}-vnet', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-07-01",
              "name": "[format('{0}/mydnsgroupname', 'privateEndpointForKv')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.vaultcore.azure.net')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.vaultcore.azure.net')]",
                "[resourceId('Microsoft.Network/privateEndpoints', 'privateEndpointForKv')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2020-07-01",
              "name": "privateEndpointForKv",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', format('rc-{0}-vnet', parameters('resourceToken')), variables('privateEndpointSubnetName'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('rc-{0}-kv', parameters('resourceToken'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', format('rc-{0}-kv', parameters('resourceToken')))]",
                      "groupIds": [
                        "vault"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', format('rc-{0}-kv', parameters('resourceToken')))]",
                "[resourceId('Microsoft.Network/virtualNetworks', format('rc-{0}-vnet', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('rc-{0}-vnet', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', format('privatelink.blob.{0}', environment().suffixes.storage), format('{0}-link', format('privatelink.blob.{0}', environment().suffixes.storage)))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', format('rc-{0}-vnet', parameters('resourceToken')))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]",
                "[resourceId('Microsoft.Network/virtualNetworks', format('rc-{0}-vnet', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "privatelink.azconfig.io",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', 'privatelink.azconfig.io', format('{0}-link', 'privatelink.azconfig.io'))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', format('rc-{0}-vnet', parameters('resourceToken')))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azconfig.io')]",
                "[resourceId('Microsoft.Network/virtualNetworks', format('rc-{0}-vnet', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-07-01",
              "name": "[format('{0}/mydnsgroupname', 'privateEndpointForAppConfig')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azconfig.io')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azconfig.io')]",
                "[resourceId('Microsoft.Network/privateEndpoints', 'privateEndpointForAppConfig')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2020-07-01",
              "name": "privateEndpointForAppConfig",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', format('rc-{0}-vnet', parameters('resourceToken')), variables('privateEndpointSubnetName'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-appconfig', parameters('resourceToken'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken')))]",
                      "groupIds": [
                        "configurationStores"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken')))]",
                "[resourceId('Microsoft.Network/virtualNetworks', format('rc-{0}-vnet', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "setUpAzureAdSettings",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[format('rc-{0}-kv', parameters('resourceToken'))]"
                  },
                  "appConfigurationServiceName": {
                    "value": "[format('{0}-appconfig', parameters('resourceToken'))]"
                  },
                  "azureAdApiScopeFrontEnd": {
                    "value": "[parameters('azureAdApiScopeFrontEnd')]"
                  },
                  "azureAdClientIdForBackEnd": {
                    "value": "[parameters('azureAdClientIdForBackEnd')]"
                  },
                  "azureAdClientIdForFrontEnd": {
                    "value": "[parameters('azureAdClientIdForFrontEnd')]"
                  },
                  "azureAdClientSecretForFrontEnd": {
                    "value": "[parameters('azureAdClientSecretForFrontEnd')]"
                  },
                  "azureAdTenantId": {
                    "value": "[parameters('azureAdTenantId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "15036889016948309172"
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Key Vault that will store AAD secrets for the web app"
                      },
                      "minLength": 1
                    },
                    "appConfigurationServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Azure App Configuration Service that will store AAD secrets for the web app"
                      },
                      "minLength": 1
                    },
                    "azureAdApiScopeFrontEnd": {
                      "type": "string",
                      "metadata": {
                        "description": "A scope used by the front-end public web app to get authorized access to the public web api. Looks similar to api://33333333-bbbb-4444-cccc-555555555555/relecloud.api"
                      }
                    },
                    "azureAdClientIdForBackEnd": {
                      "type": "string",
                      "metadata": {
                        "description": "A unique identifier of the API web app"
                      }
                    },
                    "azureAdClientIdForFrontEnd": {
                      "type": "string",
                      "metadata": {
                        "description": "A unique identifier of the front-end web app"
                      }
                    },
                    "azureAdClientSecretForFrontEnd": {
                      "type": "securestring",
                      "metadata": {
                        "description": "A secret generated by Azure AD so that the web app can establish trust with Azure AD"
                      }
                    },
                    "azureAdTenantId": {
                      "type": "string",
                      "metadata": {
                        "description": "A unique identifier of the Azure AD tenant"
                      }
                    }
                  },
                  "variables": {
                    "clientSecretName": "AzureAd--ClientSecret"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2021-11-01-preview",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('clientSecretName'))]",
                      "properties": {
                        "value": "[parameters('azureAdClientSecretForFrontEnd')]"
                      }
                    },
                    {
                      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}/{1}', parameters('appConfigurationServiceName'), 'App:RelecloudApi:AttendeeScope')]",
                      "properties": {
                        "value": "[parameters('azureAdApiScopeFrontEnd')]"
                      }
                    },
                    {
                      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}/{1}', parameters('appConfigurationServiceName'), 'AzureAd:ClientId')]",
                      "properties": {
                        "value": "[parameters('azureAdClientIdForFrontEnd')]"
                      }
                    },
                    {
                      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}/{1}', parameters('appConfigurationServiceName'), 'AzureAd:ClientSecret')]",
                      "properties": {
                        "value": "[string(createObject('uri', format('{0}secrets/{1}', reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2021-11-01-preview').vaultUri, variables('clientSecretName'))))]",
                        "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
                      }
                    },
                    {
                      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}/{1}', parameters('appConfigurationServiceName'), 'AzureAd:TenantId')]",
                      "properties": {
                        "value": "[parameters('azureAdTenantId')]"
                      }
                    },
                    {
                      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}/{1}', parameters('appConfigurationServiceName'), 'Api:AzureAd:ClientId')]",
                      "properties": {
                        "value": "[parameters('azureAdClientIdForBackEnd')]"
                      }
                    },
                    {
                      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}/{1}', parameters('appConfigurationServiceName'), 'Api:AzureAd:TenantId')]",
                      "properties": {
                        "value": "[parameters('azureAdTenantId')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-appconfig', parameters('resourceToken')))]",
                "[resourceId('Microsoft.KeyVault/vaults', format('rc-{0}-kv', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-{0}-scalesettings', format('{0}-web-plan', parameters('resourceToken')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "appServicePlanName": {
                    "value": "[format('{0}-web-plan', parameters('resourceToken'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "isProd": {
                    "value": "[parameters('isProd')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "6845333641637421026"
                    }
                  },
                  "parameters": {
                    "appServicePlanName": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies the name of an existing app service plan that will receive scale rules"
                      },
                      "minLength": 1
                    },
                    "isProd": {
                      "type": "bool",
                      "metadata": {
                        "description": "Enables the template to choose different SKU by environment"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The Azure location where this solution is deployed"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "An object collection that contains annotations to describe the deployed azure resources to improve operational visibility"
                      }
                    }
                  },
                  "variables": {
                    "scaleOutThreshold": 85,
                    "scaleInThreshold": 60
                  },
                  "resources": [
                    {
                      "condition": "[parameters('isProd')]",
                      "type": "Microsoft.Insights/autoscalesettings",
                      "apiVersion": "2014-04-01",
                      "name": "[format('{0}-autoscale', parameters('appServicePlanName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "targetResourceUri": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
                        "enabled": true,
                        "profiles": [
                          {
                            "name": "Auto created scale condition",
                            "capacity": {
                              "minimum": "[string(1)]",
                              "maximum": "[string(10)]",
                              "default": "[string(1)]"
                            },
                            "rules": [
                              {
                                "metricTrigger": {
                                  "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
                                  "metricName": "CpuPercentage",
                                  "timeGrain": "PT5M",
                                  "statistic": "Average",
                                  "timeWindow": "PT10M",
                                  "timeAggregation": "Average",
                                  "operator": "GreaterThan",
                                  "threshold": "[variables('scaleOutThreshold')]"
                                },
                                "scaleAction": {
                                  "direction": "Increase",
                                  "type": "ChangeCount",
                                  "value": "[string(1)]",
                                  "cooldown": "PT10M"
                                }
                              },
                              {
                                "metricTrigger": {
                                  "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
                                  "metricName": "CpuPercentage",
                                  "timeGrain": "PT5M",
                                  "statistic": "Average",
                                  "timeWindow": "PT10M",
                                  "timeAggregation": "Average",
                                  "operator": "LessThan",
                                  "threshold": "[variables('scaleInThreshold')]"
                                },
                                "scaleAction": {
                                  "direction": "Decrease",
                                  "type": "ChangeCount",
                                  "value": "[string(1)]",
                                  "cooldown": "PT10M"
                                }
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', format('{0}-web-plan', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-{0}-scalesettings', format('{0}-api-plan', parameters('resourceToken')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "appServicePlanName": {
                    "value": "[format('{0}-api-plan', parameters('resourceToken'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "isProd": {
                    "value": "[parameters('isProd')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "6845333641637421026"
                    }
                  },
                  "parameters": {
                    "appServicePlanName": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies the name of an existing app service plan that will receive scale rules"
                      },
                      "minLength": 1
                    },
                    "isProd": {
                      "type": "bool",
                      "metadata": {
                        "description": "Enables the template to choose different SKU by environment"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The Azure location where this solution is deployed"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "An object collection that contains annotations to describe the deployed azure resources to improve operational visibility"
                      }
                    }
                  },
                  "variables": {
                    "scaleOutThreshold": 85,
                    "scaleInThreshold": 60
                  },
                  "resources": [
                    {
                      "condition": "[parameters('isProd')]",
                      "type": "Microsoft.Insights/autoscalesettings",
                      "apiVersion": "2014-04-01",
                      "name": "[format('{0}-autoscale', parameters('appServicePlanName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "targetResourceUri": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
                        "enabled": true,
                        "profiles": [
                          {
                            "name": "Auto created scale condition",
                            "capacity": {
                              "minimum": "[string(1)]",
                              "maximum": "[string(10)]",
                              "default": "[string(1)]"
                            },
                            "rules": [
                              {
                                "metricTrigger": {
                                  "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
                                  "metricName": "CpuPercentage",
                                  "timeGrain": "PT5M",
                                  "statistic": "Average",
                                  "timeWindow": "PT10M",
                                  "timeAggregation": "Average",
                                  "operator": "GreaterThan",
                                  "threshold": "[variables('scaleOutThreshold')]"
                                },
                                "scaleAction": {
                                  "direction": "Increase",
                                  "type": "ChangeCount",
                                  "value": "[string(1)]",
                                  "cooldown": "PT10M"
                                }
                              },
                              {
                                "metricTrigger": {
                                  "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
                                  "metricName": "CpuPercentage",
                                  "timeGrain": "PT5M",
                                  "statistic": "Average",
                                  "timeWindow": "PT10M",
                                  "timeAggregation": "Average",
                                  "operator": "LessThan",
                                  "threshold": "[variables('scaleInThreshold')]"
                                },
                                "scaleAction": {
                                  "direction": "Decrease",
                                  "type": "ChangeCount",
                                  "value": "[string(1)]",
                                  "cooldown": "PT10M"
                                }
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', format('{0}-api-plan', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('web-{0}-app-insights', parameters('resourceToken'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "resourceToken": {
                    "value": "[parameters('resourceToken')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "workspaceId": {
                    "value": "[resourceId('Microsoft.OperationalInsights/workspaces', format('web-{0}-log', parameters('resourceToken')))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "3223445123283610465"
                    }
                  },
                  "parameters": {
                    "resourceToken": {
                      "type": "string",
                      "metadata": {
                        "description": "A generated identifier used to create unique resources"
                      },
                      "minLength": 1
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Primary location for all resources. Should specify an Azure region. e.g. `eastus2` "
                      },
                      "minLength": 1
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "An object collection that contains annotations to describe the deployed azure resources to improve operational visibility"
                      }
                    },
                    "workspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "An Id for a log analytics workspace that contains events to show in a dashboard"
                      },
                      "minLength": 1
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[format('web-{0}-appi', parameters('resourceToken'))]",
                      "location": "[parameters('location')]",
                      "kind": "web",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "Application_Type": "web",
                        "WorkspaceResourceId": "[parameters('workspaceId')]"
                      }
                    },
                    {
                      "type": "Microsoft.Portal/dashboards",
                      "apiVersion": "2020-09-01-preview",
                      "name": "[format('web-{0}-appid', parameters('resourceToken'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "lenses": [
                          {
                            "order": 0,
                            "parts": [
                              {
                                "position": {
                                  "x": 0,
                                  "y": 0,
                                  "colSpan": 2,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "id",
                                      "value": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                    },
                                    {
                                      "name": "Version",
                                      "value": "1.0"
                                    }
                                  ],
                                  "type": "Extension/AppInsightsExtension/PartType/AspNetOverviewPinnedPart",
                                  "asset": {
                                    "idInputName": "id",
                                    "type": "ApplicationInsights"
                                  },
                                  "defaultMenuItemId": "overview"
                                }
                              },
                              {
                                "position": {
                                  "x": 2,
                                  "y": 0,
                                  "colSpan": 1,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "ComponentId",
                                      "value": {
                                        "Name": "[format('web-{0}-appi', parameters('resourceToken'))]",
                                        "SubscriptionId": "[subscription().subscriptionId]",
                                        "ResourceGroup": "[resourceGroup().name]"
                                      }
                                    },
                                    {
                                      "name": "Version",
                                      "value": "1.0"
                                    }
                                  ],
                                  "type": "Extension/AppInsightsExtension/PartType/ProactiveDetectionAsyncPart",
                                  "asset": {
                                    "idInputName": "ComponentId",
                                    "type": "ApplicationInsights"
                                  },
                                  "defaultMenuItemId": "ProactiveDetection"
                                }
                              },
                              {
                                "position": {
                                  "x": 3,
                                  "y": 0,
                                  "colSpan": 1,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "ComponentId",
                                      "value": {
                                        "Name": "[format('web-{0}-appi', parameters('resourceToken'))]",
                                        "SubscriptionId": "[subscription().subscriptionId]",
                                        "ResourceGroup": "[resourceGroup().name]"
                                      }
                                    },
                                    {
                                      "name": "ResourceId",
                                      "value": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                    }
                                  ],
                                  "type": "Extension/AppInsightsExtension/PartType/QuickPulseButtonSmallPart",
                                  "asset": {
                                    "idInputName": "ComponentId",
                                    "type": "ApplicationInsights"
                                  }
                                }
                              },
                              {
                                "position": {
                                  "x": 4,
                                  "y": 0,
                                  "colSpan": 1,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "ComponentId",
                                      "value": {
                                        "Name": "[format('web-{0}-appi', parameters('resourceToken'))]",
                                        "SubscriptionId": "[subscription().subscriptionId]",
                                        "ResourceGroup": "[resourceGroup().name]"
                                      }
                                    },
                                    {
                                      "name": "TimeContext",
                                      "value": {
                                        "durationMs": 86400000,
                                        "endTime": null,
                                        "createdTime": "2018-05-04T01:20:33.345Z",
                                        "isInitialTime": true,
                                        "grain": 1,
                                        "useDashboardTimeRange": false
                                      }
                                    },
                                    {
                                      "name": "Version",
                                      "value": "1.0"
                                    }
                                  ],
                                  "type": "Extension/AppInsightsExtension/PartType/AvailabilityNavButtonPart",
                                  "asset": {
                                    "idInputName": "ComponentId",
                                    "type": "ApplicationInsights"
                                  }
                                }
                              },
                              {
                                "position": {
                                  "x": 5,
                                  "y": 0,
                                  "colSpan": 1,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "ComponentId",
                                      "value": {
                                        "Name": "[format('web-{0}-appi', parameters('resourceToken'))]",
                                        "SubscriptionId": "[subscription().subscriptionId]",
                                        "ResourceGroup": "[resourceGroup().name]"
                                      }
                                    },
                                    {
                                      "name": "TimeContext",
                                      "value": {
                                        "durationMs": 86400000,
                                        "endTime": null,
                                        "createdTime": "2018-05-08T18:47:35.237Z",
                                        "isInitialTime": true,
                                        "grain": 1,
                                        "useDashboardTimeRange": false
                                      }
                                    },
                                    {
                                      "name": "ConfigurationId",
                                      "value": "78ce933e-e864-4b05-a27b-71fd55a6afad"
                                    }
                                  ],
                                  "type": "Extension/AppInsightsExtension/PartType/AppMapButtonPart",
                                  "asset": {
                                    "idInputName": "ComponentId",
                                    "type": "ApplicationInsights"
                                  }
                                }
                              },
                              {
                                "position": {
                                  "x": 0,
                                  "y": 1,
                                  "colSpan": 3,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [],
                                  "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                  "settings": {
                                    "content": {
                                      "settings": {
                                        "content": "# Usage",
                                        "title": "",
                                        "subtitle": ""
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "position": {
                                  "x": 3,
                                  "y": 1,
                                  "colSpan": 1,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "ComponentId",
                                      "value": {
                                        "Name": "[format('web-{0}-appi', parameters('resourceToken'))]",
                                        "SubscriptionId": "[subscription().subscriptionId]",
                                        "ResourceGroup": "[resourceGroup().name]"
                                      }
                                    },
                                    {
                                      "name": "TimeContext",
                                      "value": {
                                        "durationMs": 86400000,
                                        "endTime": null,
                                        "createdTime": "2018-05-04T01:22:35.782Z",
                                        "isInitialTime": true,
                                        "grain": 1,
                                        "useDashboardTimeRange": false
                                      }
                                    }
                                  ],
                                  "type": "Extension/AppInsightsExtension/PartType/UsageUsersOverviewPart",
                                  "asset": {
                                    "idInputName": "ComponentId",
                                    "type": "ApplicationInsights"
                                  }
                                }
                              },
                              {
                                "position": {
                                  "x": 4,
                                  "y": 1,
                                  "colSpan": 3,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [],
                                  "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                  "settings": {
                                    "content": {
                                      "settings": {
                                        "content": "# Reliability",
                                        "title": "",
                                        "subtitle": ""
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "position": {
                                  "x": 7,
                                  "y": 1,
                                  "colSpan": 1,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "ResourceId",
                                      "value": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                    },
                                    {
                                      "name": "DataModel",
                                      "value": {
                                        "version": "1.0.0",
                                        "timeContext": {
                                          "durationMs": 86400000,
                                          "createdTime": "2018-05-04T23:42:40.072Z",
                                          "isInitialTime": false,
                                          "grain": 1,
                                          "useDashboardTimeRange": false
                                        }
                                      },
                                      "isOptional": true
                                    },
                                    {
                                      "name": "ConfigurationId",
                                      "value": "8a02f7bf-ac0f-40e1-afe9-f0e72cfee77f",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/AppInsightsExtension/PartType/CuratedBladeFailuresPinnedPart",
                                  "isAdapter": true,
                                  "asset": {
                                    "idInputName": "ResourceId",
                                    "type": "ApplicationInsights"
                                  },
                                  "defaultMenuItemId": "failures"
                                }
                              },
                              {
                                "position": {
                                  "x": 8,
                                  "y": 1,
                                  "colSpan": 3,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [],
                                  "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                  "settings": {
                                    "content": {
                                      "settings": {
                                        "content": "# Responsiveness\r\n",
                                        "title": "",
                                        "subtitle": ""
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "position": {
                                  "x": 11,
                                  "y": 1,
                                  "colSpan": 1,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "ResourceId",
                                      "value": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                    },
                                    {
                                      "name": "DataModel",
                                      "value": {
                                        "version": "1.0.0",
                                        "timeContext": {
                                          "durationMs": 86400000,
                                          "createdTime": "2018-05-04T23:43:37.804Z",
                                          "isInitialTime": false,
                                          "grain": 1,
                                          "useDashboardTimeRange": false
                                        }
                                      },
                                      "isOptional": true
                                    },
                                    {
                                      "name": "ConfigurationId",
                                      "value": "2a8ede4f-2bee-4b9c-aed9-2db0e8a01865",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/AppInsightsExtension/PartType/CuratedBladePerformancePinnedPart",
                                  "isAdapter": true,
                                  "asset": {
                                    "idInputName": "ResourceId",
                                    "type": "ApplicationInsights"
                                  },
                                  "defaultMenuItemId": "performance"
                                }
                              },
                              {
                                "position": {
                                  "x": 12,
                                  "y": 1,
                                  "colSpan": 3,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [],
                                  "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                  "settings": {
                                    "content": {
                                      "settings": {
                                        "content": "# Browser",
                                        "title": "",
                                        "subtitle": ""
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "position": {
                                  "x": 15,
                                  "y": 1,
                                  "colSpan": 1,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "ComponentId",
                                      "value": {
                                        "Name": "[format('web-{0}-appi', parameters('resourceToken'))]",
                                        "SubscriptionId": "[subscription().subscriptionId]",
                                        "ResourceGroup": "[resourceGroup().name]"
                                      }
                                    },
                                    {
                                      "name": "MetricsExplorerJsonDefinitionId",
                                      "value": "BrowserPerformanceTimelineMetrics"
                                    },
                                    {
                                      "name": "TimeContext",
                                      "value": {
                                        "durationMs": 86400000,
                                        "createdTime": "2018-05-08T12:16:27.534Z",
                                        "isInitialTime": false,
                                        "grain": 1,
                                        "useDashboardTimeRange": false
                                      }
                                    },
                                    {
                                      "name": "CurrentFilter",
                                      "value": {
                                        "eventTypes": [
                                          4,
                                          1,
                                          3,
                                          5,
                                          2,
                                          6,
                                          13
                                        ],
                                        "typeFacets": {},
                                        "isPermissive": false
                                      }
                                    },
                                    {
                                      "name": "id",
                                      "value": {
                                        "Name": "[format('web-{0}-appi', parameters('resourceToken'))]",
                                        "SubscriptionId": "[subscription().subscriptionId]",
                                        "ResourceGroup": "[resourceGroup().name]"
                                      }
                                    },
                                    {
                                      "name": "Version",
                                      "value": "1.0"
                                    }
                                  ],
                                  "type": "Extension/AppInsightsExtension/PartType/MetricsExplorerBladePinnedPart",
                                  "asset": {
                                    "idInputName": "ComponentId",
                                    "type": "ApplicationInsights"
                                  },
                                  "defaultMenuItemId": "browser"
                                }
                              },
                              {
                                "position": {
                                  "x": 0,
                                  "y": 2,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                              },
                                              "name": "sessions/count",
                                              "aggregationType": 5,
                                              "namespace": "microsoft.insights/components/kusto",
                                              "metricVisualization": {
                                                "displayName": "Sessions",
                                                "color": "#47BDF5"
                                              }
                                            },
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                              },
                                              "name": "users/count",
                                              "aggregationType": 5,
                                              "namespace": "microsoft.insights/components/kusto",
                                              "metricVisualization": {
                                                "displayName": "Users",
                                                "color": "#7E58FF"
                                              }
                                            }
                                          ],
                                          "title": "Unique sessions and users",
                                          "visualization": {
                                            "chartType": 2,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          },
                                          "openBladeOnClick": {
                                            "openBlade": true,
                                            "destinationBlade": {
                                              "extensionName": "HubsExtension",
                                              "bladeName": "ResourceMenuBlade",
                                              "parameters": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]",
                                                "menuid": "segmentationUsers"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 4,
                                  "y": 2,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                              },
                                              "name": "requests/failed",
                                              "aggregationType": 7,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Failed requests",
                                                "color": "#EC008C"
                                              }
                                            }
                                          ],
                                          "title": "Failed requests",
                                          "visualization": {
                                            "chartType": 3,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          },
                                          "openBladeOnClick": {
                                            "openBlade": true,
                                            "destinationBlade": {
                                              "extensionName": "HubsExtension",
                                              "bladeName": "ResourceMenuBlade",
                                              "parameters": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]",
                                                "menuid": "failures"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 8,
                                  "y": 2,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                              },
                                              "name": "requests/duration",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Server response time",
                                                "color": "#00BCF2"
                                              }
                                            }
                                          ],
                                          "title": "Server response time",
                                          "visualization": {
                                            "chartType": 2,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          },
                                          "openBladeOnClick": {
                                            "openBlade": true,
                                            "destinationBlade": {
                                              "extensionName": "HubsExtension",
                                              "bladeName": "ResourceMenuBlade",
                                              "parameters": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]",
                                                "menuid": "performance"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 12,
                                  "y": 2,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                              },
                                              "name": "browserTimings/networkDuration",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Page load network connect time",
                                                "color": "#7E58FF"
                                              }
                                            },
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                              },
                                              "name": "browserTimings/processingDuration",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Client processing time",
                                                "color": "#44F1C8"
                                              }
                                            },
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                              },
                                              "name": "browserTimings/sendDuration",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Send request time",
                                                "color": "#EB9371"
                                              }
                                            },
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                              },
                                              "name": "browserTimings/receiveDuration",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Receiving response time",
                                                "color": "#0672F1"
                                              }
                                            }
                                          ],
                                          "title": "Average page load time breakdown",
                                          "visualization": {
                                            "chartType": 3,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 0,
                                  "y": 5,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                              },
                                              "name": "availabilityResults/availabilityPercentage",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Availability",
                                                "color": "#47BDF5"
                                              }
                                            }
                                          ],
                                          "title": "Average availability",
                                          "visualization": {
                                            "chartType": 3,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          },
                                          "openBladeOnClick": {
                                            "openBlade": true,
                                            "destinationBlade": {
                                              "extensionName": "HubsExtension",
                                              "bladeName": "ResourceMenuBlade",
                                              "parameters": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]",
                                                "menuid": "availability"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 4,
                                  "y": 5,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                              },
                                              "name": "exceptions/server",
                                              "aggregationType": 7,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Server exceptions",
                                                "color": "#47BDF5"
                                              }
                                            },
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                              },
                                              "name": "dependencies/failed",
                                              "aggregationType": 7,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Dependency failures",
                                                "color": "#7E58FF"
                                              }
                                            }
                                          ],
                                          "title": "Server exceptions and Dependency failures",
                                          "visualization": {
                                            "chartType": 2,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 8,
                                  "y": 5,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                              },
                                              "name": "performanceCounters/processorCpuPercentage",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Processor time",
                                                "color": "#47BDF5"
                                              }
                                            },
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                              },
                                              "name": "performanceCounters/processCpuPercentage",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Process CPU",
                                                "color": "#7E58FF"
                                              }
                                            }
                                          ],
                                          "title": "Average processor and process CPU utilization",
                                          "visualization": {
                                            "chartType": 2,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 12,
                                  "y": 5,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                              },
                                              "name": "exceptions/browser",
                                              "aggregationType": 7,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Browser exceptions",
                                                "color": "#47BDF5"
                                              }
                                            }
                                          ],
                                          "title": "Browser exceptions",
                                          "visualization": {
                                            "chartType": 2,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 0,
                                  "y": 8,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                              },
                                              "name": "availabilityResults/count",
                                              "aggregationType": 7,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Availability test results count",
                                                "color": "#47BDF5"
                                              }
                                            }
                                          ],
                                          "title": "Availability test results count",
                                          "visualization": {
                                            "chartType": 2,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 4,
                                  "y": 8,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                              },
                                              "name": "performanceCounters/processIOBytesPerSecond",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Process IO rate",
                                                "color": "#47BDF5"
                                              }
                                            }
                                          ],
                                          "title": "Average process I/O rate",
                                          "visualization": {
                                            "chartType": 2,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 8,
                                  "y": 8,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, format('web-{0}-appi', parameters('resourceToken')))]"
                                              },
                                              "name": "performanceCounters/memoryAvailableBytes",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Available memory",
                                                "color": "#47BDF5"
                                              }
                                            }
                                          ],
                                          "title": "Average available memory",
                                          "visualization": {
                                            "chartType": 2,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              }
                            ]
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Insights/components', format('web-{0}-appi', parameters('resourceToken')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "APPLICATIONINSIGHTS_CONNECTION_STRING": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Insights/components', format('web-{0}-appi', parameters('resourceToken'))), '2020-02-02').ConnectionString]"
                    },
                    "APPLICATIONINSIGHTS_INSTRUMENTATION_KEY": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Insights/components', format('web-{0}-appi', parameters('resourceToken'))), '2020-02-02').InstrumentationKey]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', format('web-{0}-log', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "sqlSetup",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "devOpsManagedIdentityId": {
                    "value": "[parameters('devOpsManagedIdentityId')]"
                  },
                  "isProd": {
                    "value": "[parameters('isProd')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "managedIdentity": {
                    "value": {
                      "name": "[format('web-{0}-identity', parameters('resourceToken'))]",
                      "id": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken')))]",
                      "properties": {
                        "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken'))), '2018-11-30').clientId]",
                        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken'))), '2018-11-30').principalId]",
                        "tenantId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken'))), '2018-11-30').tenantId]"
                      }
                    }
                  },
                  "resourceToken": {
                    "value": "[parameters('resourceToken')]"
                  },
                  "sqlAdministratorLogin": {
                    "value": "[format('sqladmin{0}', parameters('resourceToken'))]"
                  },
                  "sqlAdministratorPassword": {
                    "value": "[parameters('azureSqlPassword')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "11214312316032521841"
                    }
                  },
                  "parameters": {
                    "devOpsManagedIdentityId": {
                      "type": "string",
                      "metadata": {
                        "description": "The id for the user-assigned managed identity that runs deploymentScripts"
                      },
                      "minLength": 1
                    },
                    "managedIdentity": {
                      "type": "object",
                      "metadata": {
                        "description": "Expecting the user-assigned managed identity that represents the API web app. Will become the SQL db admin"
                      }
                    },
                    "resourceToken": {
                      "type": "string",
                      "metadata": {
                        "description": "A generated identifier used to create unique resources"
                      },
                      "minLength": 1
                    },
                    "isProd": {
                      "type": "bool",
                      "metadata": {
                        "description": "Enables the template to choose different SKU by environment"
                      }
                    },
                    "sqlAdministratorLogin": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of an admin account that can be used to add Managed Identities to Azure SQL"
                      },
                      "minLength": 1
                    },
                    "sqlAdministratorPassword": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The password for an admin account that can be used to add Managed Identities to Azure SQL"
                      },
                      "minLength": 1
                    },
                    "uniqueScriptId": {
                      "type": "string",
                      "defaultValue": "[newGuid()]",
                      "metadata": {
                        "description": "Ensures that the idempotent scripts are executed each time the deployment is executed"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Primary location for all resources. Should specify an Azure region. e.g. `eastus2` "
                      },
                      "minLength": 1
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "An object collection that contains annotations to describe the deployed azure resources to improve operational visibility"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "# This script is not intended to be run from a local environment.\r\n# This script is run by azd during devOps deployment. This script handles rolling back auth changes\r\n# that would block the createSqlAcctForManagedIdentity.ps1 scripts from connecting when run as a deploymentScript\r\n# https://github.com/Azure/reliable-web-app-pattern-dotnet/issues/224\r\n\r\n# This script provides a workflow to automatically configure the deployed Azure resources and make it easier to get\r\n# started. It is not intended as part of a recommended best practice as we do not recommend deploying Azure SQL\r\n# with network configurations that would allow a deployment script such as this to connect.\r\n\r\nParam(\r\n    [Parameter(Mandatory = $true)][string]$SqlServerName,\r\n    [Parameter(Mandatory = $true)][string]$ResourceGroupName\r\n)\r\n\r\n# check if resource group exists\r\nif (!(Get-AzResourceGroup -Name $ResourceGroupName -ErrorAction SilentlyContinue)) {\r\n    Exit\r\n}\r\n\r\n$DoesSqlServerExist = Get-AzResource -ResourceGroupName $ResourceGroupName -ODataQuery \"ResourceType eq 'Microsoft.Sql/servers'\"\r\n\r\nif ($DoesSqlServerExist) {\r\n    Write-Host \"Disabling Ad only admin\"\r\n    Disable-AzSqlServerActiveDirectoryOnlyAuthentication -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName\r\n}",
                    "$fxv#1": "# This script is not intended to be run from a local environment.\r\n# This script is run by azd during devOps deployment.\r\n# For the local environment version of this script, please see makeSqlUserAccount.ps1\r\n\r\n# This script provides a workflow to automatically configure the deployed Azure resources and make it easier to get\r\n# started. It is not intended as part of a recommended best practice as we do not recommend deploying Azure SQL\r\n# with network configurations that would allow a deployment script such as this to connect.\r\n\r\n# We recommend handling this one-time process as part of your SQL data migration process\r\n# More details can be found in our docs for Azure SQL server\r\n# https://learn.microsoft.com/en-us/azure/app-service/tutorial-connect-msi-sql-database?tabs=windowsclient%2Cef%2Cdotnet\r\n\r\nParam(\r\n  [Parameter(Mandatory = $true)][string]$ServerName,\r\n  [Parameter(Mandatory = $true)][string]$ResourceGroupName,\r\n  [Parameter(Mandatory = $true)][string]$ServerUri,\r\n  [Parameter(Mandatory = $true)][string]$CatalogName,\r\n  [Parameter(Mandatory = $true)][string]$ApplicationId,\r\n  [Parameter(Mandatory = $true)][string]$ManagedIdentityName,\r\n  [Parameter(Mandatory = $true)][string]$SqlAdminLogin,\r\n  [Parameter(Mandatory = $true)][string]$SqlAdminPwd,\r\n  [Parameter(Mandatory = $true)][bool]$IsProd\r\n)\r\n\r\n# Make Invoke-Sqlcmd available\r\nInstall-Module -Name SqlServer -Force\r\nImport-Module -Name SqlServer\r\n\r\n# translate applicationId into SID\r\n[guid]$guid = [System.Guid]::Parse($ApplicationId)\r\n\r\nforeach ($byte in $guid.ToByteArray()) {\r\n  $byteGuid += [System.String]::Format(\"{0:X2}\", $byte)\r\n}\r\n$Sid = \"0x\" + $byteGuid\r\n\r\n# Prepare SQL cmd to CREATE USER\r\n$CreateUserSQL = \"IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = N'$ManagedIdentityName') create user [$ManagedIdentityName] with sid = $Sid, type = E;\"\r\n\r\n# Connect as SQL Admin acct and execute SQL cmd\r\nInvoke-Sqlcmd -ServerInstance $ServerUri -database $CatalogName -Username $SqlAdminLogin -Password $SqlAdminPwd -Query $CreateUserSQL\r\n\r\n# Prepare SQL cmd to grant db_owner role\r\n$GrantDbOwner = \"IF NOT EXISTS (SELECT * FROM sys.database_principals p JOIN sys.database_role_members db_owner_role ON db_owner_role.member_principal_id = p.principal_id JOIN sys.database_principals role_names ON role_names.principal_id = db_owner_role.role_principal_id AND role_names.[name] = 'db_owner' WHERE p.[name]=N'$ManagedIdentityName') ALTER ROLE db_owner ADD MEMBER [$ManagedIdentityName];\"\r\n\r\n# Connect as SQL Admin acct and execute SQL cmd\r\nInvoke-Sqlcmd -ServerInstance $ServerUri -database $CatalogName -Username $SqlAdminLogin -Password $SqlAdminPwd -Query $GrantDbOwner\r\n\r\n# Restrict access to Azure AD users\r\nEnable-AzSqlServerActiveDirectoryOnlyAuthentication -ServerName $ServerName -ResourceGroupName $ResourceGroupName\r\n\r\n",
                    "sqlServerName": "[format('{0}-sql-server', parameters('resourceToken'))]",
                    "sqlCatalogName": "[format('{0}-sql-database', parameters('resourceToken'))]",
                    "skuTierName": "[if(parameters('isProd'), 'Premium', 'Standard')]",
                    "dtuCapacity": "[if(parameters('isProd'), 125, 10)]",
                    "requestedBackupStorageRedundancy": "[if(parameters('isProd'), 'Geo', 'Local')]",
                    "readScale": "[if(parameters('isProd'), 'Enabled', 'Disabled')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "allowSqlAdminScript",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "AzurePowerShell",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('devOpsManagedIdentityId'))]": {}
                        }
                      },
                      "properties": {
                        "forceUpdateTag": "[parameters('uniqueScriptId')]",
                        "azPowerShellVersion": "7.4",
                        "retentionInterval": "P1D",
                        "cleanupPreference": "OnSuccess",
                        "arguments": "[format('-SqlServerName ''{0}'' -ResourceGroupName ''{1}''', variables('sqlServerName'), resourceGroup().name)]",
                        "scriptContent": "[variables('$fxv#0')]"
                      }
                    },
                    {
                      "type": "Microsoft.Sql/servers",
                      "apiVersion": "2021-02-01-preview",
                      "name": "[variables('sqlServerName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "administratorLogin": "[parameters('sqlAdministratorLogin')]",
                        "administratorLoginPassword": "[parameters('sqlAdministratorPassword')]",
                        "administrators": {
                          "login": "[parameters('managedIdentity').name]",
                          "principalType": "User",
                          "sid": "[parameters('managedIdentity').properties.principalId]",
                          "tenantId": "[parameters('managedIdentity').properties.tenantId]"
                        },
                        "version": "12.0"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deploymentScripts', 'allowSqlAdminScript')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Sql/servers/databases",
                      "apiVersion": "2021-11-01-preview",
                      "name": "[format('{0}/{1}', variables('sqlServerName'), variables('sqlCatalogName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(parameters('tags'), createObject('displayName', variables('sqlCatalogName')))]",
                      "sku": {
                        "name": "[variables('skuTierName')]",
                        "tier": "[variables('skuTierName')]",
                        "capacity": "[variables('dtuCapacity')]"
                      },
                      "properties": {
                        "requestedBackupStorageRedundancy": "[variables('requestedBackupStorageRedundancy')]",
                        "readScale": "[variables('readScale')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Sql/servers/firewallRules",
                      "apiVersion": "2021-11-01-preview",
                      "name": "[format('{0}/{1}', variables('sqlServerName'), 'AllowAllWindowsAzureIps')]",
                      "properties": {
                        "endIpAddress": "0.0.0.0",
                        "startIpAddress": "0.0.0.0"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "createSqlUserScript",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "AzurePowerShell",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('devOpsManagedIdentityId'))]": {}
                        }
                      },
                      "properties": {
                        "forceUpdateTag": "[parameters('uniqueScriptId')]",
                        "azPowerShellVersion": "7.4",
                        "retentionInterval": "P1D",
                        "cleanupPreference": "OnSuccess",
                        "arguments": "[format('-ServerName ''{0}'' -ResourceGroupName ''{1}'' -ServerUri ''{2}'' -CatalogName ''{3}'' -ApplicationId ''{4}'' -ManagedIdentityName ''{5}'' -SqlAdminLogin ''{6}'' -SqlAdminPwd ''{7}'' -IsProd {8}', variables('sqlServerName'), resourceGroup().name, reference(resourceId('Microsoft.Sql/servers', variables('sqlServerName')), '2021-02-01-preview').fullyQualifiedDomainName, variables('sqlCatalogName'), parameters('managedIdentity').properties.principalId, parameters('managedIdentity').name, parameters('sqlAdministratorLogin'), parameters('sqlAdministratorPassword'), if(parameters('isProd'), '1', '0'))]",
                        "scriptContent": "[variables('$fxv#1')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers/databases', split(format('{0}/{1}', variables('sqlServerName'), variables('sqlCatalogName')), '/')[0], split(format('{0}/{1}', variables('sqlServerName'), variables('sqlCatalogName')), '/')[1])]",
                        "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "sqlServerFqdn": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Sql/servers', variables('sqlServerName')), '2021-02-01-preview').fullyQualifiedDomainName]"
                    },
                    "sqlCatalogName": {
                      "type": "string",
                      "value": "[variables('sqlCatalogName')]"
                    },
                    "sqlServerName": {
                      "type": "string",
                      "value": "[variables('sqlServerName')]"
                    },
                    "sqlServerId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
                    },
                    "sqlDatabaseName": {
                      "type": "string",
                      "value": "[format('{0}/{1}', variables('sqlServerName'), variables('sqlCatalogName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken')))]",
                "[resourceId('Microsoft.Network/virtualNetworks', format('rc-{0}-vnet', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "redisSetup",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "devOpsManagedIdentityId": {
                    "value": "[parameters('devOpsManagedIdentityId')]"
                  },
                  "isProd": {
                    "value": "[parameters('isProd')]"
                  },
                  "keyVaultName": {
                    "value": "[format('rc-{0}-kv', parameters('resourceToken'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "resourceToken": {
                    "value": "[parameters('resourceToken')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "privateEndpointNameForRedis": {
                    "value": "[variables('privateEndpointNameForRedis')]"
                  },
                  "privateEndpointSubnetName": {
                    "value": "[variables('privateEndpointSubnetName')]"
                  },
                  "privateEndpointVnetName": {
                    "value": "[format('rc-{0}-vnet', parameters('resourceToken'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "1692029691440305461"
                    }
                  },
                  "parameters": {
                    "devOpsManagedIdentityId": {
                      "type": "string",
                      "metadata": {
                        "description": "The id for the user-assigned managed identity that runs deploymentScripts"
                      }
                    },
                    "isProd": {
                      "type": "bool",
                      "metadata": {
                        "description": "Enables the template to choose different SKU by environment"
                      }
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Key Vault that will store AAD secrets for the web app"
                      },
                      "minLength": 1
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The Azure location where this solution is deployed"
                      }
                    },
                    "resourceToken": {
                      "type": "string",
                      "metadata": {
                        "description": "A generated identifier used to create unique resources"
                      }
                    },
                    "privateEndpointNameForRedis": {
                      "type": "string",
                      "metadata": {
                        "description": "Name for private endpoint"
                      }
                    },
                    "privateEndpointSubnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of subnet for private endpoint"
                      }
                    },
                    "privateEndpointVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of vnet for private endpoint"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "An object collection that contains annotations to describe the deployed azure resources to improve operational visibility"
                      }
                    },
                    "uniqueScriptId": {
                      "type": "string",
                      "defaultValue": "[newGuid()]",
                      "metadata": {
                        "description": "Ensures that the idempotent scripts are executed each time the deployment is executed"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "#!/bin/bash\r\n\r\nPOSITIONAL_ARGS=()\r\n\r\nwhile [[ $# -gt 0 ]]; do\r\n  case $1 in\r\n    --name|-n)\r\n      redisCacheName=\"$2\"\r\n      shift # past argument\r\n      shift # past value\r\n      ;;\r\n    --resource-group|-g)\r\n      resourceGroupName=\"$2\"\r\n      shift # past argument\r\n      shift # past value\r\n      ;;\r\n    --subscription|-s)\r\n      subscriptionId=\"$2\"\r\n      shift # past argument\r\n      shift # past value\r\n      ;;\r\n    --help*)\r\n      echo \"\"\r\n      echo \"<This command should only be run after using the azd command to deploy resources to Azure>\"\r\n      echo \"\"\r\n      echo \"Command\"\r\n      echo \"    azureRedisCachePublicDevAccess.sh : is used by devs to make Redis accessible for non-prod dev tasks\"\r\n      echo \"\"\r\n      echo \"Arguments\"\r\n      echo \"    --resource-group -g : Name of resource group where this Redis Cache is deployed.\"\r\n      echo \"    --subscription   -s : The subscriptionId where this Redis Cache is deployed.\"\r\n      echo \"    --name           -n : Name of the Redis Cache that should be modified.\"\r\n      echo \"\"\r\n      exit 1\r\n      ;;\r\n    -*|--*)\r\n      echo \"Unknown option $1\"\r\n      exit 1\r\n      ;;\r\n    *)\r\n      POSITIONAL_ARGS+=(\"$1\") # save positional arg\r\n      shift # past argument\r\n      ;;\r\n  esac\r\ndone\r\n\r\nif [[ ${#resourceGroupName} -eq 0 ]]; then\r\n  echo \"FATAL ERROR: Missing required parameter --resource-group\" 1>&2\r\n  exit 6\r\nfi\r\n\r\nif [[ ${#subscriptionId} -eq 0 ]]; then\r\n  echo \"FATAL ERROR: Missing required parameter --subscription\" 1>&2\r\n  exit 7\r\nfi\r\n\r\nif [[ ${#redisCacheName} -eq 0 ]]; then\r\n  echo \"FATAL ERROR: Missing required parameter --name\" 1>&2\r\n  exit 8\r\nfi\r\n\r\naz rest \\\r\n    --method PATCH \\\r\n    --uri \"https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroupName/providers/Microsoft.Cache/Redis/$redisCacheName?api-version=2020-06-01\" \\\r\n    --headers 'Content-Type=application/json' \\\r\n    --body \"{ \\\"properties\\\": { \\\"publicNetworkAccess\\\":\\\"Enabled\\\" } }\"",
                    "redisCacheSkuName": "[if(parameters('isProd'), 'Standard', 'Basic')]",
                    "redisCacheFamilyName": "[if(parameters('isProd'), 'C', 'C')]",
                    "redisCacheCapacity": "[if(parameters('isProd'), 1, 0)]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2021-11-01-preview",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'App--RedisCache--ConnectionString')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "value": "[format('{0}.redis.cache.windows.net:6380,password={1},ssl=True,abortConnect=False', format('{0}-rediscache', parameters('resourceToken')), listKeys(resourceId('Microsoft.Cache/redis', format('{0}-rediscache', parameters('resourceToken'))), '2022-05-01').primaryKey)]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Cache/redis', format('{0}-rediscache', parameters('resourceToken')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Cache/redis",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}-rediscache', parameters('resourceToken'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "redisVersion": "6.0",
                        "sku": {
                          "name": "[variables('redisCacheSkuName')]",
                          "family": "[variables('redisCacheFamilyName')]",
                          "capacity": "[variables('redisCacheCapacity')]"
                        },
                        "enableNonSslPort": false,
                        "publicNetworkAccess": "Disabled",
                        "redisConfiguration": {
                          "maxmemory-reserved": "30",
                          "maxfragmentationmemory-reserved": "30",
                          "maxmemory-delta": "30"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-07-01",
                      "name": "[parameters('privateEndpointNameForRedis')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "subnet": {
                          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('privateEndpointVnetName'), parameters('privateEndpointSubnetName'))]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('{0}-rediscache', parameters('resourceToken'))]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Cache/redis', format('{0}-rediscache', parameters('resourceToken')))]",
                              "groupIds": [
                                "redisCache"
                              ]
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Cache/redis', format('{0}-rediscache', parameters('resourceToken')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "privatelink.redis.cache.windows.net",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', 'privatelink.redis.cache.windows.net', format('{0}-link', 'privatelink.redis.cache.windows.net'))]",
                      "location": "global",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('privateEndpointVnetName'))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.redis.cache.windows.net')]"
                      ]
                    },
                    {
                      "condition": "[not(parameters('isProd'))]",
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "makeRedisAccessibleForDevs",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "AzureCLI",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('devOpsManagedIdentityId'))]": {}
                        }
                      },
                      "properties": {
                        "forceUpdateTag": "[parameters('uniqueScriptId')]",
                        "azCliVersion": "2.37.0",
                        "retentionInterval": "P1D",
                        "scriptContent": "[variables('$fxv#0')]",
                        "arguments": "[format(' --subscription {0} --resource-group {1} --name {2}', subscription().subscriptionId, resourceGroup().name, format('{0}-rediscache', parameters('resourceToken')))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Cache/redis', format('{0}-rediscache', parameters('resourceToken')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyVaultRedisConnStrName": {
                      "type": "string",
                      "value": "App--RedisCache--ConnectionString"
                    },
                    "privateDnsZoneId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.redis.cache.windows.net')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', format('rc-{0}-kv', parameters('resourceToken')))]",
                "[resourceId('Microsoft.Network/virtualNetworks', format('rc-{0}-vnet', parameters('resourceToken')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "storageSetup",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "isProd": {
                    "value": "[parameters('isProd')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "resourceToken": {
                    "value": "[parameters('resourceToken')]"
                  },
                  "roleAssignmentsList": {
                    "value": [
                      {
                        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken'))), '2018-11-30').principalId]",
                        "roleDefinitionId": "[variables('storageBlobDataOwnerRoleDefinitionId')]",
                        "description": "Give the application read and write permission to storage account.",
                        "principalType": "ServicePrincipal"
                      }
                    ]
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "privateLinkSubnetId": {
                    "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', format('rc-{0}-vnet', parameters('resourceToken')), variables('privateEndpointSubnetName'))]"
                  },
                  "privateDnsZoneId": {
                    "value": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.16.2.56959",
                      "templateHash": "7530554960428087370"
                    }
                  },
                  "parameters": {
                    "isProd": {
                      "type": "bool",
                      "metadata": {
                        "description": "Enables the template to choose different SKU by environment"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Primary location for all resources. Should specify an Azure region. e.g. `eastus2` "
                      },
                      "minLength": 1
                    },
                    "resourceToken": {
                      "type": "string",
                      "metadata": {
                        "description": "A generated identifier used to create unique resources"
                      },
                      "minLength": 1
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "An object collection that contains annotations to describe the deployed azure resources to improve operational visibility"
                      }
                    },
                    "roleAssignmentsList": {
                      "type": "array",
                      "metadata": {
                        "description": "Role assignments to add when resource is created"
                      }
                    },
                    "privateLinkSubnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Id of subnet for private endpoint"
                      }
                    },
                    "privateDnsZoneId": {
                      "type": "string",
                      "metadata": {
                        "description": "Id of Azure Private DNS for private endpoint"
                      }
                    }
                  },
                  "variables": {
                    "storageSku": "[if(parameters('isProd'), 'Standard_ZRS', 'Standard_LRS')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}storage', parameters('resourceToken'))]",
                      "tags": "[parameters('tags')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[variables('storageSku')]"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "publicNetworkAccess": "Disabled"
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}', format('{0}storage', parameters('resourceToken')), 'default')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}storage', parameters('resourceToken')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}/{2}', format('{0}storage', parameters('resourceToken')), 'default', 'tickets')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', format('{0}storage', parameters('resourceToken')), 'default')]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('roleAssignmentsList'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', format('{0}storage', parameters('resourceToken')), 'default', 'tickets')]",
                      "name": "[guid(parameters('roleAssignmentsList')[copyIndex()].principalId, parameters('roleAssignmentsList')[copyIndex()].roleDefinitionId, resourceGroup().id)]",
                      "properties": {
                        "description": "[parameters('roleAssignmentsList')[copyIndex()].description]",
                        "principalId": "[parameters('roleAssignmentsList')[copyIndex()].principalId]",
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleAssignmentsList')[copyIndex()].roleDefinitionId)]",
                        "principalType": "[parameters('roleAssignmentsList')[copyIndex()].principalType]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', format('{0}storage', parameters('resourceToken')), 'default', 'tickets')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-privateLink', format('{0}storage', parameters('resourceToken')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "privateEndpointForTickeStore"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "serviceResourceId": {
                            "value": "[resourceId('Microsoft.Storage/storageAccounts', format('{0}storage', parameters('resourceToken')))]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('privateLinkSubnetId')]"
                          },
                          "serviceGroupIds": {
                            "value": [
                              "blob"
                            ]
                          },
                          "privateDnsZoneId": {
                            "value": "[parameters('privateDnsZoneId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.16.2.56959",
                              "templateHash": "11451537175316917915"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the private endpoint that will be created for this connection"
                              },
                              "minLength": 1
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Primary location for all resources. Should specify an Azure region. e.g. `eastus2` "
                              },
                              "minLength": 1
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resourceId of an existing Azure subnet that will be used to create a private endpoint connection"
                              },
                              "minLength": 1
                            },
                            "privateDnsZoneId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resourceId of an existing Azure private DNS that will provide the routing for this private endpoint"
                              },
                              "minLength": 1
                            },
                            "serviceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resourceId of an existing Azure resource that will be accessed by the private endpoint connection"
                              },
                              "minLength": 1
                            },
                            "serviceGroupIds": {
                              "type": "array",
                              "metadata": {
                                "description": "The type of Azure resource that will be networked as a private endpoint such as `configurationStores` or `vault`"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "metadata": {
                                "description": "An object collection that contains annotations to describe the deployed azure resources to improve operational visibility"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2020-07-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('name')]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('serviceResourceId')]",
                                      "groupIds": "[parameters('serviceGroupIds')]"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2020-07-01",
                              "name": "[format('{0}/{1}', parameters('name'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "[parameters('name')]",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}storage', parameters('resourceToken')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "storageAccountResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', format('{0}storage', parameters('resourceToken')))]"
                    },
                    "storageAccocuntBlobURL": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', format('{0}storage', parameters('resourceToken'))), '2022-09-01').primaryEndpoints.blob]"
                    },
                    "containerId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', format('{0}storage', parameters('resourceToken')), 'default', 'tickets')]"
                    },
                    "containerName": {
                      "type": "string",
                      "value": "tickets"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('web-{0}-identity', parameters('resourceToken')))]",
                "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]",
                "[resourceId('Microsoft.Network/virtualNetworks', format('rc-{0}-vnet', parameters('resourceToken')))]"
              ]
            }
          ],
          "outputs": {
            "KEY_VAULT_NAME": {
              "type": "string",
              "value": "[format('rc-{0}-kv', parameters('resourceToken'))]"
            },
            "APP_CONFIGURATION_SVC_NAME": {
              "type": "string",
              "value": "[format('{0}-appconfig', parameters('resourceToken'))]"
            },
            "WEB_URI": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', format('web-{0}-web-app', parameters('resourceToken'))), '2021-03-01').defaultHostName]"
            },
            "API_URI": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', format('api-{0}-web-app', parameters('resourceToken'))), '2021-01-15').defaultHostName]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'devOpsIdentitySetup')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('frontDoor-{0}', variables('primaryResourceToken'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "tags": {
            "value": "[variables('tags')]"
          },
          "logAnalyticsWorkspaceIdForDiagnostics": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logAnalyticsForDiagnostics'), '2022-09-01').outputs.LOG_WORKSPACE_ID.value]"
          },
          "primaryBackendAddress": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('primary-{0}', variables('primaryResourceToken'))), '2022-09-01').outputs.WEB_URI.value]"
          },
          "secondaryBackendAddress": {
            "value": "none"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.2.56959",
              "templateHash": "10306377705265950244"
            }
          },
          "parameters": {
            "logAnalyticsWorkspaceIdForDiagnostics": {
              "type": "string",
              "metadata": {
                "description": "ResourceId for a log analytics workspace that will collect diagnostic info for Key Vault and Front Door"
              },
              "minLength": 1
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "An object collection that contains annotations to describe the deployed azure resources to improve operational visibility"
              }
            },
            "primaryBackendAddress": {
              "type": "string",
              "metadata": {
                "description": "The hostname of the backend. Must be an IP address or FQDN."
              },
              "minLength": 1
            },
            "secondaryBackendAddress": {
              "type": "string",
              "metadata": {
                "description": "The hostname of the backend. Must be an IP address or FQDN."
              }
            }
          },
          "variables": {
            "globalResourceToken": "[uniqueString(resourceGroup().id)]",
            "frontDoorEndpointName": "[format('afd-{0}', variables('globalResourceToken'))]",
            "frontDoorProfileName": "[format('afd-{0}', variables('globalResourceToken'))]",
            "frontDoorOriginGroupName": "MyOriginGroup",
            "frontDoorOriginName": "MyAppServiceOrigin",
            "frontDoorRouteName": "MyRoute"
          },
          "resources": [
            {
              "type": "Microsoft.Cdn/profiles",
              "apiVersion": "2021-06-01",
              "name": "[variables('frontDoorProfileName')]",
              "tags": "[parameters('tags')]",
              "location": "global",
              "sku": {
                "name": "Premium_AzureFrontDoor"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Cdn/profiles/{0}', variables('frontDoorProfileName'))]",
              "name": "diagnosticSettings",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceIdForDiagnostics')]",
                "logs": [
                  {
                    "category": "FrontDoorWebApplicationFirewallLog",
                    "enabled": true,
                    "retentionPolicy": {
                      "days": 0,
                      "enabled": true
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorProfileName'))]"
              ]
            },
            {
              "type": "Microsoft.Cdn/profiles/afdEndpoints",
              "apiVersion": "2021-06-01",
              "name": "[format('{0}/{1}', variables('frontDoorProfileName'), variables('frontDoorEndpointName'))]",
              "location": "global",
              "properties": {
                "enabledState": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorProfileName'))]"
              ]
            },
            {
              "type": "Microsoft.Cdn/profiles/originGroups",
              "apiVersion": "2021-06-01",
              "name": "[format('{0}/{1}', variables('frontDoorProfileName'), variables('frontDoorOriginGroupName'))]",
              "properties": {
                "loadBalancingSettings": {
                  "sampleSize": 4,
                  "successfulSamplesRequired": 3
                },
                "healthProbeSettings": {
                  "probePath": "/healthz",
                  "probeRequestType": "HEAD",
                  "probeProtocol": "Https",
                  "probeIntervalInSeconds": 100
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorProfileName'))]"
              ]
            },
            {
              "type": "Microsoft.Cdn/profiles/originGroups/origins",
              "apiVersion": "2021-06-01",
              "name": "[format('{0}/{1}/{2}', variables('frontDoorProfileName'), variables('frontDoorOriginGroupName'), format('{0}1', variables('frontDoorOriginName')))]",
              "properties": {
                "hostName": "[parameters('primaryBackendAddress')]",
                "httpPort": 80,
                "httpsPort": 443,
                "originHostHeader": "[parameters('primaryBackendAddress')]",
                "priority": 1,
                "weight": 1000
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('frontDoorProfileName'), variables('frontDoorOriginGroupName'))]"
              ]
            },
            {
              "condition": "[not(equals(parameters('secondaryBackendAddress'), 'none'))]",
              "type": "Microsoft.Cdn/profiles/originGroups/origins",
              "apiVersion": "2021-06-01",
              "name": "[format('{0}/{1}/{2}', variables('frontDoorProfileName'), variables('frontDoorOriginGroupName'), format('{0}2', variables('frontDoorOriginName')))]",
              "properties": {
                "hostName": "[parameters('secondaryBackendAddress')]",
                "httpPort": 80,
                "httpsPort": 443,
                "originHostHeader": "[parameters('secondaryBackendAddress')]",
                "priority": 2,
                "weight": 1000
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('frontDoorProfileName'), variables('frontDoorOriginGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Cdn/profiles/afdEndpoints/routes",
              "apiVersion": "2021-06-01",
              "name": "[format('{0}/{1}/{2}', variables('frontDoorProfileName'), variables('frontDoorEndpointName'), variables('frontDoorRouteName'))]",
              "properties": {
                "originGroup": {
                  "id": "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('frontDoorProfileName'), variables('frontDoorOriginGroupName'))]"
                },
                "supportedProtocols": [
                  "Http",
                  "Https"
                ],
                "patternsToMatch": [
                  "/*"
                ],
                "forwardingProtocol": "HttpsOnly",
                "linkToDefaultDomain": "Enabled",
                "httpsRedirect": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorProfileName'), variables('frontDoorEndpointName'))]",
                "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('frontDoorProfileName'), variables('frontDoorOriginGroupName'))]",
                "[resourceId('Microsoft.Cdn/profiles/originGroups/origins', variables('frontDoorProfileName'), variables('frontDoorOriginGroupName'), format('{0}1', variables('frontDoorOriginName')))]",
                "[resourceId('Microsoft.Cdn/profiles/originGroups/origins', variables('frontDoorProfileName'), variables('frontDoorOriginGroupName'), format('{0}2', variables('frontDoorOriginName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/FrontDoorWebApplicationFirewallPolicies",
              "apiVersion": "2020-11-01",
              "name": "[format('wafpolicy{0}', variables('globalResourceToken'))]",
              "location": "Global",
              "sku": {
                "name": "Premium_AzureFrontDoor"
              },
              "properties": {
                "policySettings": {
                  "enabledState": "Enabled",
                  "mode": "Prevention",
                  "requestBodyCheck": "Enabled"
                },
                "customRules": {
                  "rules": []
                },
                "managedRules": {
                  "managedRuleSets": [
                    {
                      "ruleSetType": "Microsoft_DefaultRuleSet",
                      "ruleSetVersion": "2.0",
                      "ruleSetAction": "Block",
                      "ruleGroupOverrides": [],
                      "exclusions": []
                    },
                    {
                      "ruleSetType": "Microsoft_BotManagerRuleSet",
                      "ruleSetVersion": "1.0",
                      "ruleSetAction": "Block",
                      "ruleGroupOverrides": [],
                      "exclusions": []
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Cdn/profiles/securityPolicies",
              "apiVersion": "2021-06-01",
              "name": "[format('{0}/{1}', variables('frontDoorProfileName'), format('wafpolicy-{0}', variables('globalResourceToken')))]",
              "properties": {
                "parameters": {
                  "wafPolicy": {
                    "id": "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', format('wafpolicy{0}', variables('globalResourceToken')))]"
                  },
                  "associations": [
                    {
                      "domains": [
                        {
                          "id": "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorProfileName'), variables('frontDoorEndpointName'))]"
                        }
                      ],
                      "patternsToMatch": [
                        "/*"
                      ]
                    }
                  ],
                  "type": "WebApplicationFirewall"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorProfileName'), variables('frontDoorEndpointName'))]",
                "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorProfileName'))]",
                "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', format('wafpolicy{0}', variables('globalResourceToken')))]"
              ]
            }
          ],
          "outputs": {
            "HOST_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorProfileName'), variables('frontDoorEndpointName')), '2021-06-01').hostName]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'logAnalyticsForDiagnostics')]",
        "[resourceId('Microsoft.Resources/deployments', format('primary-{0}', variables('primaryResourceToken')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "primaryKeyValue",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appConfigurationServiceName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('primary-{0}', variables('primaryResourceToken'))), '2022-09-01').outputs.APP_CONFIGURATION_SVC_NAME.value]"
          },
          "frontDoorUri": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('frontDoor-{0}', variables('primaryResourceToken'))), '2022-09-01').outputs.HOST_NAME.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.2.56959",
              "templateHash": "9516384434912939102"
            }
          },
          "parameters": {
            "appConfigurationServiceName": {
              "type": "string",
              "metadata": {
                "description": "Name of the App Configuration Service where the App Service loads configuration"
              }
            },
            "frontDoorUri": {
              "type": "string",
              "metadata": {
                "description": "A host name for the Azure Front Door that protects the front end web app"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}', parameters('appConfigurationServiceName'), 'App:FrontDoorUri')]",
              "properties": {
                "value": "[parameters('frontDoorUri')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('frontDoor-{0}', variables('primaryResourceToken')))]",
        "[resourceId('Microsoft.Resources/deployments', format('primary-{0}', variables('primaryResourceToken')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "primaryKeyVaultDiagnostics",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('primary-{0}', variables('primaryResourceToken'))), '2022-09-01').outputs.KEY_VAULT_NAME.value]"
          },
          "logAnalyticsWorkspaceIdForDiagnostics": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logAnalyticsForDiagnostics'), '2022-09-01').outputs.LOG_WORKSPACE_ID.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.2.56959",
              "templateHash": "13848621633681695519"
            }
          },
          "parameters": {
            "logAnalyticsWorkspaceIdForDiagnostics": {
              "type": "string",
              "metadata": {
                "description": "ResourceId for a log analytics workspace that will collect diagnostic info for Key Vault and Front Door"
              },
              "minLength": 1
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Name of a key vault that shuold be monitored"
              },
              "minLength": 1
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "default",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceIdForDiagnostics')]",
                "logs": [
                  {
                    "category": "AuditEvent",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'logAnalyticsForDiagnostics')]",
        "[resourceId('Microsoft.Resources/deployments', format('primary-{0}', variables('primaryResourceToken')))]"
      ]
    }
  ],
  "outputs": {
    "WEB_URI": {
      "type": "string",
      "value": "[format('https://{0}', reference(resourceId('Microsoft.Resources/deployments', format('frontDoor-{0}', variables('primaryResourceToken'))), '2022-09-01').outputs.HOST_NAME.value)]"
    },
    "AZURE_LOCATION": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "DEBUG_IS_MULTI_LOCATION_DEPLOYMENT": {
      "type": "bool",
      "value": "[variables('isMultiLocationDeployment')]"
    },
    "DEBUG_SECONDARY_AZURE_LOCATION": {
      "type": "string",
      "value": "[parameters('secondaryAzureLocation')]"
    },
    "DEBUG_IS_PROD": {
      "type": "bool",
      "value": "[variables('isProdBool')]"
    }
  }
}